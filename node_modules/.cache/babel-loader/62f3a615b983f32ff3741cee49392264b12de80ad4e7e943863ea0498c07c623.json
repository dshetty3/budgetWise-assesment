{"ast":null,"code":"import { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  name: 'RightSection',\n  data() {\n    return {\n      purchasedList: [],\n      // Add default data or fetch from an API\n      bankImage: 'path/to/your/bank/image.png' // Path to your bank image\n    };\n  },\n  mounted() {\n    this.initCharts();\n  },\n  methods: {\n    initCharts() {\n      // Bar Chart\n      const ctx = this.$refs.myChart.getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['Mar', 'Apr', 'May', 'June', 'July', 'Aug'],\n          datasets: [{\n            label: 'Utilities',\n            data: [450, 500, 620, 800, 690, 500],\n            backgroundColor: 'rgba(34, 167, 240)',\n            borderColor: 'rgba(34, 167, 240)',\n            borderWidth: 1,\n            barPercentage: 0.7\n          }\n          // Add other datasets here\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              stacked: true,\n              grid: {\n                display: false\n              },\n              ticks: {\n                callback: function (value) {\n                  return value >= 1500 ? `${(value / 1000).toFixed(1)}k` : value;\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                fontColor: '#333',\n                usePointStyle: true,\n                borderRadius: 1,\n                boxWidth: 30\n              },\n              align: 'center',\n              maxItems: 3\n            },\n            annotation: {\n              annotations: [{\n                type: 'line',\n                mode: 'horizontal',\n                scaleID: 'y',\n                value: 1500,\n                borderColor: 'black',\n                borderWidth: 0.5,\n                label: {\n                  content: '1.5k',\n                  enabled: true,\n                  position: 'end'\n                }\n              }, {\n                type: 'line',\n                mode: 'horizontal',\n                scaleID: 'y',\n                value: 2000,\n                borderColor: 'rgba(255, 0, 0, 0.5)',\n                borderWidth: 1,\n                borderDash: [3, 3],\n                label: {\n                  position: 'right',\n                  enabled: true\n                }\n              }\n              // Add more annotations if needed\n              ]\n            }\n          }\n        }\n      });\n\n      // Doughnut Chart\n      const ctxDoughnut = this.$refs.myDoughnutChart.getContext('2d');\n      new Chart(ctxDoughnut, {\n        type: 'doughnut',\n        data: {\n          labels: ['Expenses', 'Savings'],\n          datasets: [{\n            data: [300, 300],\n            backgroundColor: ['#31cd3e', '#d5d5d5']\n          }]\n        },\n        options: {\n          responsive: false,\n          maintainAspectRatio: false,\n          cutout: 90,\n          plugins: {\n            legend: {\n              display: false\n            },\n            tooltip: {\n              enabled: false\n            },\n            // Use the afterDraw callback to add text\n            animation: {\n              onComplete: function (context) {\n                const chartInstance = context.chart;\n                const ctx = chartInstance.ctx;\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                const centerX = (chartInstance.chartArea.left + chartInstance.chartArea.right) / 2;\n                const centerY = (chartInstance.chartArea.top + chartInstance.chartArea.bottom) / 2;\n                ctx.fillStyle = '#008000';\n                ctx.font = 'bold 40px \"Outfit\"';\n                ctx.fillText('$300', centerX, centerY - 8);\n                ctx.fillStyle = '#000';\n                ctx.font = '20px \"Outfit\"';\n                ctx.fillText('of 600 saved', centerX, centerY + 20);\n                ctx.fillText('this month', centerX, centerY + 40);\n              }\n            }\n          }\n        }\n      });\n\n      // Update additional text\n      this.$nextTick(() => {\n        document.getElementById('additionalText').textContent = 'Total Savings: $300 of $3,000';\n        document.getElementById('additionalText1').textContent = 'by April 15, 2023';\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","name","data","purchasedList","bankImage","mounted","initCharts","methods","ctx","$refs","myChart","getContext","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","barPercentage","options","responsive","maintainAspectRatio","scales","x","stacked","grid","display","y","ticks","callback","value","toFixed","plugins","legend","position","fontColor","usePointStyle","borderRadius","boxWidth","align","maxItems","annotation","annotations","mode","scaleID","content","enabled","borderDash","ctxDoughnut","myDoughnutChart","cutout","tooltip","animation","onComplete","context","chartInstance","chart","textAlign","textBaseline","centerX","chartArea","left","right","centerY","top","bottom","fillStyle","font","fillText","$nextTick","document","getElementById","textContent"],"sources":["/Users/dishashetty/Desktop/Divercity.io/divercity.io/src/components/RightSection.vue"],"sourcesContent":["<template>\n  <div id=\"rhs\" :class=\"{ active: currentSection === 'home' }\">\n    <div class=\"active-budget-card\">\n      <div class=\"stats\">\n        <div class=\"total\">Spent\n          <div id=\"budget-amount\" style=\"color:rgb(229, 16, 16); font-size: 25px\">$800</div>\n        </div>\n        <div class=\"divider\"></div>\n        <div class=\"middle\">Available\n          <div id=\"budget-amount\" style=\"color:#31cd3e; font-size: 25px\">$1200</div>\n        </div>\n        <div class=\"divider\"></div>\n        <div class=\"right1\">Budget\n          <div id=\"budget-amount\" style=\"color:rgb(2, 8, 3); font-size: 25px\">$2000</div>\n        </div>\n      </div>\n      <div class=\"box-progress-bar\">\n        <span class=\"box-progress\" style=\"width: 40%\"></span>\n      </div>\n    </div>\n\n    <br>\n    <div class=\"recent\">6 Month Snapshot</div>\n    <br>\n    <div class=\"graph\">\n      <canvas ref=\"myChart\" style=\"height:400px;\"></canvas>\n    </div>\n\n    <br>\n    <div class=\"recent\">\n      <div class=\"recent-transactions\">Recent Transactions</div>\n      <div class=\"see-all\">See all</div>\n      <br><br>\n    </div>\n    <div class=\"view\">\n      <div class=\"purchased-card\" v-for=\"list in purchasedList\" :key=\"list.id\" style=\"cursor: pointer;\">\n        <div class=\"minimal-info\">\n          <div class=\"left\">\n            <div class=\"icon\">\n              <div style=\"position: relative;display: flex;justify-content: center;align-items: center;flex-direction: column;\">\n                <div style=\"position: relative; display: flex; justify-content: center; align-items: center;\">\n                  <div id=\"middle-circle1\">\n                    <img :src=\"list.image\">\n                  </div>\n                  <div id=\"progress-spinner\" :style=\"{ 'background-color': list.hex }\"></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"info\">\n              <div id=\"title\">\n                <span>{{ list.label }}</span>\n              </div>\n              <div class=\"additional\">\n                {{ list.sublabel }}\n              </div>\n            </div>\n          </div>\n          <div class=\"right\" style=\"white-space: nowrap;\">\n            <span id=\"amount1\" style=\"color: rgb(3, 6, 8);\">${{ list.cost }}</span>\n            <span id=\"date\">{{ list.date }}</span>\n          </div>\n          <div class=\"right2\">\n            <i class=\"fa-solid fa-angle-right\" style=\"margin-right: -20px;\"></i>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <br>\n    <div class=\"recent\">Bank & Credit Cards</div>\n    <br>\n    <div class=\"purchased-card\" style=\"cursor: pointer;\">\n      <div class=\"minimal-info\">\n        <div class=\"left\">\n          <div class=\"icon\">\n            <div style=\"position: relative; display: flex; justify-content: center; align-items: center; flex-direction: column;\">\n              <div style=\"position: relative; display: flex; justify-content: center; align-items: center;\">\n                <img :src=\"bankImage\" id=\"bank\" alt=\"BOA\" />\n              </div>\n            </div>\n          </div>\n          <div class=\"info\">\n            <div id=\"title\">\n              <span>Bank of America</span>\n            </div>\n            <div class=\"additional\">...4765</div>\n          </div>\n        </div>\n        <div class=\"right\">\n          <span id=\"amount\" style=\"color: #6970c9;\">Balance</span>\n          <span id=\"date\" style=\"color: #6970c9;\">$1,326.23</span>\n        </div>\n        <i class=\"fa-solid fa-angle-up\" style=\"margin-right: -20px;\"></i>\n      </div>\n    </div>\n\n    <br>\n    <div class=\"recent\">Savings Goals\n      <div class=\"see-all\">\n        <span style=\"font-size: 3rem;\">&#43;</span>\n      </div>\n    </div>\n\n    <div class=\"graph1\">\n      <div class=\"trip\">Italy Trip\n        <div class=\"see-all1\" style=\"color: rgb(105, 112, 201); margin-left: 650px; margin-top: -30px; font-size: 1.2rem;\">\n          See details\n        </div>\n      </div>\n      <br>\n\n      <canvas ref=\"myDoughnutChart\"></canvas>\n\n      <div id=\"additionalText\" class=\"additional-text\"></div>\n      <div id=\"additionalText1\" class=\"additional-text1\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nexport default {\n  name: 'RightSection',\n  data() {\n    return {\n      purchasedList: [], // Add default data or fetch from an API\n      bankImage: 'path/to/your/bank/image.png', // Path to your bank image\n    };\n  },\n  mounted() {\n    this.initCharts();\n  },\n  methods: {\n    initCharts() {\n      // Bar Chart\n      const ctx = this.$refs.myChart.getContext('2d');\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: ['Mar', 'Apr', 'May', 'June', 'July', 'Aug'],\n          datasets: [\n            {\n              label: 'Utilities',\n              data: [450, 500, 620, 800, 690, 500],\n              backgroundColor: 'rgba(34, 167, 240)',\n              borderColor: 'rgba(34, 167, 240)',\n              borderWidth: 1,\n              barPercentage: 0.7,\n            },\n            // Add other datasets here\n          ],\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              stacked: true,\n              grid: { display: false },\n            },\n            y: {\n              stacked: true,\n              grid: { display: false },\n              ticks: {\n                callback: function(value) {\n                  return value >= 1500 ? `${(value / 1000).toFixed(1)}k` : value;\n                },\n              },\n            },\n          },\n          plugins: {\n            legend: {\n              display: true,\n              position: 'bottom',\n              labels: {\n                fontColor: '#333',\n                usePointStyle: true,\n                borderRadius: 1,\n                boxWidth: 30,\n              },\n              align: 'center',\n              maxItems: 3,\n            },\n            annotation: {\n              annotations: [\n                {\n                  type: 'line',\n                  mode: 'horizontal',\n                  scaleID: 'y',\n                  value: 1500,\n                  borderColor: 'black',\n                  borderWidth: 0.5,\n                  label: {\n                    content: '1.5k',\n                    enabled: true,\n                    position: 'end',\n                  },\n                },\n                {\n                  type: 'line',\n                  mode: 'horizontal',\n                  scaleID: 'y',\n                  value: 2000,\n                  borderColor: 'rgba(255, 0, 0, 0.5)',\n                  borderWidth: 1,\n                  borderDash: [3, 3],\n                  label: {\n                    position: 'right',\n                    enabled: true,\n                  },\n                },\n                // Add more annotations if needed\n              ],\n            },\n          },\n        },\n      });\n\n      // Doughnut Chart\n      const ctxDoughnut = this.$refs.myDoughnutChart.getContext('2d');\n      new Chart(ctxDoughnut, {\n        type: 'doughnut',\n        data: {\n          labels: ['Expenses', 'Savings'],\n          datasets: [{\n            data: [300, 300],\n            backgroundColor: ['#31cd3e', '#d5d5d5'],\n          }],\n        },\n        options: {\n          responsive: false,\n          maintainAspectRatio: false,\n          cutout: 90,\n          plugins: {\n            legend: { display: false },\n            tooltip: { enabled: false },\n            // Use the afterDraw callback to add text\n            animation: {\n              onComplete: function(context) {\n                const chartInstance = context.chart;\n                const ctx = chartInstance.ctx;\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                const centerX = (chartInstance.chartArea.left + chartInstance.chartArea.right) / 2;\n                const centerY = (chartInstance.chartArea.top + chartInstance.chartArea.bottom) / 2;\n                ctx.fillStyle = '#008000';\n                ctx.font = 'bold 40px \"Outfit\"';\n                ctx.fillText('$300', centerX, centerY - 8);\n                ctx.fillStyle = '#000';\n                ctx.font = '20px \"Outfit\"';\n                ctx.fillText('of 600 saved', centerX, centerY + 20);\n                ctx.fillText('this month', centerX, centerY + 40);\n              },\n            },\n          },\n        },\n      });\n\n      // Update additional text\n      this.$nextTick(() => {\n        document.getElementById('additionalText').textContent = 'Total Savings: $300 of $3,000';\n        document.getElementById('additionalText1').textContent = 'by April 15, 2023';\n      });\n    },\n  },\n};\n</script>\n\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}